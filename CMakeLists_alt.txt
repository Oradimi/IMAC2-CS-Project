# ---Choose CMake version---
cmake_minimum_required(VERSION 3.20)

# ---Choose project name---
project(OpenGL-TPs-Template)

# ---Setup Testing---
include(FetchContent)
FetchContent_Declare(
    doctest
    GIT_REPOSITORY https://github.com/doctest/doctest
    GIT_TAG ae7a13539fb71f270b87eb2e874fbac80bc8dda2
)
FetchContent_MakeAvailable(doctest)

# ---Add p6 library---
include(FetchContent)
set(P6_RAW_OPENGL_MODE ON CACHE BOOL "")
FetchContent_Declare(
    p6
    GIT_REPOSITORY https://github.com/julesfouchy/p6
    GIT_TAG 350bf29ec49f43c8600c7e0dbc6099091367c752
)
FetchContent_MakeAvailable(p6)

# ---Create a target for each exercise---
add_executable(${PROJECT_NAME})

# ---Choose C++ version---
target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_20)

# ---Choose warning level---
if(MSVC)
    target_compile_options(${PROJECT_NAME} PRIVATE /W4)
else()
    target_compile_options(${PROJECT_NAME} PRIVATE -Wall -Wextra -Wpedantic -pedantic-errors -Wimplicit-fallthrough)
endif()

# ---Declare source files---
file(GLOB_RECURSE SOURCE_FILES CONFIGURE_DEPENDS src/*)
file(GLOB_RECURSE COMMON_FILES CONFIGURE_DEPENDS src-common/*)
target_sources(${PROJECT_NAME} PRIVATE ${SOURCE_FILES} ${COMMON_FILES})
target_include_directories(${PROJECT_NAME} PRIVATE ${SOURCE_FILES} src-common)

# ---Link p6 library---
target_link_libraries(${PROJECT_NAME} PRIVATE p6::p6)
target_link_libraries(${PROJECT_NAME} PRIVATE doctest::doctest)

# ---Set the output folder---
set_target_properties(${PROJECT_NAME} PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)

# ---Copy the assets and the shaders to the output folder (where the executable is created)---
Cool__target_copy_folder(${PROJECT_NAME} assets)